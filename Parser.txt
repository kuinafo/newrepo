package com.navteq.traffic;

import com.navteq.mlVariantParser.xml.ABBREVIATION;
import com.navteq.mlVariantParser.xml.ALERTC;
import com.navteq.mlVariantParser.xml.CRITICALITY;
import com.navteq.mlVariantParser.xml.DESCRIPTION;
import com.navteq.mlVariantParser.xml.DIRECTION;
import com.navteq.mlVariantParser.xml.EVENT;
import com.navteq.mlVariantParser.xml.GEOLOC;
import com.navteq.mlVariantParser.xml.INCIDENT;
import com.navteq.mlVariantParser.xml.LOCATION;
import com.navteq.mlVariantParser.xml.NAVTECH;
import com.navteq.mlVariantParser.xml.ORIGIN;
import com.navteq.mlVariantParser.xml.RDSTMC;
import com.navteq.mlVariantParser.xml.RDSTMCLOCATIONS;
import com.navteq.mlVariantParser.xml.TO;
import com.navteq.mlVariantParser.xml.TRAFFICITEM;
import com.navteq.mlVariantParser.xml.TRAFFICITEMDESCRIPTION;
import com.navteq.mlVariantParser.xml.TRAFFICITEMDETAIL;
import com.navteq.mlVariantParser.xml.TRAFFICITEMS;
import com.navteq.mlVariantParser.xml.TRAFFICMLINCIDENTS;
import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.FilenameFilter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Properties;
import java.util.SimpleTimeZone;
import java.util.zip.GZIPInputStream;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Unmarshaller;
import org.apache.log4j.Logger;

public class ML_2_2_Incident_Variant_Parser
{
  static Properties properties;
  static String properties_filename = "dataset_properties";
  private static Logger s_logger = Logger.getLogger(ML_2_2_Incident_Variant_Parser.class);
  private String m_inputPath;
  private String m_outputPath;
  private String m_FilePrefix;
  private JAXBContext jaxbContext;
  
  public static void main(String[] args)
    throws JAXBException, IOException
  {
    properties = new Properties();
    if (args.length > 0) {
      for (int i = 0; i < args.length; i++)
      {
        String a = args[i];
        String l = a.toLowerCase();
        if (l.endsWith(".properties")) {
          properties_filename = a;
        }
      }
    }
    try
    {
      InputStreamReader isrProp = new InputStreamReader(new FileInputStream(properties_filename));
      properties.load(isrProp);
      isrProp = new InputStreamReader(new FileInputStream(properties_filename));
      properties.load(isrProp);
    }
    catch (Exception e)
    {
      return;
    }
    ML_2_2_Incident_Variant_Parser mlVariantParser = new ML_2_2_Incident_Variant_Parser();
    mlVariantParser.parse();
  }
  
  public ML_2_2_Incident_Variant_Parser()
    throws IOException
  {
    try
    {
      ClassLoader classLoader = getClass().getClassLoader();
      this.jaxbContext = JAXBContext.newInstance("com.navteq.mlVariantParser.xml", classLoader);
      InputStream in = classLoader.getResourceAsStream("ML_2_2_Incident_Variant_Parser.properties");
      try
      {
        properties.load(in);
        in.close();
        try
        {
          in.close();
        }
        catch (Throwable t) {}
        this.m_inputPath = properties.getProperty("InputLocation");
      }
      catch (Throwable t) {}finally
      {
        try
        {
          in.close();
        }
        catch (Throwable t) {}
      }
      this.m_outputPath = properties.getProperty("OutputLocation");
      this.m_FilePrefix = properties.getProperty("FilePrefix");
    }
    catch (JAXBException e)
    {
      s_logger.error("JAXBContext", e);
    }
  }
  
  private void parse()
    throws JAXBException, IOException
  {
    SimpleDateFormat StartDateFormatter = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss");
    
    StartDateFormatter.setTimeZone(new SimpleTimeZone(0, "UTC"));
    
    String outputStartDateFormatter = StartDateFormatter.format(new Date());
    
    System.out.println("Process Start: " + outputStartDateFormatter);
    
    SimpleDateFormat fileNameDateFormatter = new SimpleDateFormat("yyyyMMddHHmmss");
    
    fileNameDateFormatter.setTimeZone(new SimpleTimeZone(0, "UTC"));
    
    File dir = new File(this.m_inputPath);
    if (!dir.exists()) {
      dir.mkdirs();
    }
    FileInputStream fstream = new FileInputStream("TMC_List.txt");
    DataInputStream in = new DataInputStream(fstream);
    BufferedReader br = new BufferedReader(new InputStreamReader(in));
    
    List<String> ls = new ArrayList();
    String strLine;
    while ((strLine = br.readLine()) != null) {
      if (strLine.length() != 0) {
        ls.add(strLine);
      }
    }
    in.close();
    
    FilenameFilter filter = new FilenameFilter()
    {
      public boolean accept(File dir, String name)
      {
        return name.startsWith(ML_2_2_Incident_Variant_Parser.this.m_FilePrefix);
      }
    };
    File[] files = dir.listFiles(filter);
    if (files.length == 0) {
      fail("No file to process. Check the directory " + this.m_inputPath);
    }
    System.out.println("There are " + files.length + " files in " + dir.getCanonicalPath());
    
    File outFile = new File(this.m_outputPath);
    if (!outFile.exists()) {
      outFile.mkdirs();
    }
    String outputFilenameDate = fileNameDateFormatter.format(new Date());
    
    String outputFilename = "ML_2_2_Incident_Variant_output_" + outputFilenameDate + ".txt";
    
    String outputFilename_log = "ML_2_2_Incident_Variant_output_" + outputFilenameDate + "_log.txt";
    
    File outputFile = new File(outFile.getAbsolutePath() + File.separator + outputFilename);
    PrintWriter pw = new PrintWriter(new FileWriter(outputFile));
    
    String newline = "ID\007FileName\007TIMESTAMP\007EXTENDED_CC\007TRAFFIC_ITEM_ID\007ORIGINAL_TRAFFIC_ITEM_ID\007TRAFFIC_ITEM_STATUS_SHORT_DESC\007TRAFFIC_ITEM_TYPE_DESC\007START_TIME\007END_TIME\007ENTRY_TIME\007CRITICALITY_DESC\007CRITICALITY_ID\007VERIFIED\007ABBREVIATION_SHORT_DESC\007ABBREVIATION_DESC\007COMMENTS\007ORIGIN_CC\007ORIGIN_TT\007ORIGIN_LOCID\007ORIGIN_LOCATION_DESC\007ORIGIN_RDSDIR\007TO_CC\007TO_TT\007TO_LOCID\007TO_LOCATION_DESC\007TO_RDSDIR\007DIRECTION\007TRAFFIC_CODE\007ALERT_C_QUANTIFIER\007ALERT_C_DESCRIPTION\007ALERT_C_ALERT_C_DURATION\007ALERT_C_DIRECTION\007ALERT_C_UPDATECLASS\007ALERT_C_PHRASECODE\007ALERT_C_EXTENT\007ALERT_C_DURATION\007PRIMARY_OFFSET\007LENGTH\007ROAD_CLOSED\007EVENT_ITEM_CANCELLED\007TRAFFIC_ITEM_SHORTDESCRIPTION\007TRAFFIC_ITEM_DESCRIPTION\007TRAFFIC_ITEM_NOEXITDESCRIPTION\007ORIGIN_LON\007ORIGIN_LAT\007TO_LON\007TO_LAT\007NAVTECH_VERSIONID\007INCIDENT_RESPONSE_VEHICLES";
    
    int x = 1;
    
    pw.println(newline);
    
    File outputFile_log = new File(outFile.getAbsolutePath() + File.separator + outputFilename_log);
    PrintWriter pw_log = new PrintWriter(new FileWriter(outputFile_log));
    
    int y = 0;
    
    int z = 0;
    for (File thisFile : files) {
      try
      {
        y += 1;
        if (!thisFile.isDirectory())
        {
          String fileName = thisFile.getName();
          
          System.out.println("Processing file " + fileName + " (" + y + "/" + files.length + ")");
          
          Unmarshaller unmarshaller = this.jaxbContext.createUnmarshaller();
          
          TRAFFICMLINCIDENTS mlVariantParser = (TRAFFICMLINCIDENTS)unmarshaller.unmarshal(getTrafficFileStream(thisFile));
          
          String timestamp = String.valueOf(mlVariantParser.getTIMESTAMP());
          String extendedCC = String.valueOf(mlVariantParser.getEXTENDEDCOUNTRYCODE());
          
          TRAFFICITEMS trafficItems = mlVariantParser.getTRAFFICITEMS();
          for (TRAFFICITEM trafficItem : trafficItems.getTRAFFICITEM()) {
            try
            {
              String comments = "-1";
              if (trafficItem.getCOMMENTS() != null) {
                comments = String.valueOf(trafficItem.getCOMMENTS());
              }
              Integer commentsIndex = Integer.valueOf(comments.indexOf("\n"));
              while (commentsIndex.intValue() != -1) {
                try
                {
                  comments = comments.substring(0, commentsIndex.intValue()) + " " + comments.substring(commentsIndex.intValue() + 1);
                  commentsIndex = Integer.valueOf(comments.indexOf("\n"));
                }
                finally {}
              }
              String trafficItemId = "-1";
              if (trafficItem.getTRAFFICITEMID() != null) {
                trafficItemId = String.valueOf(trafficItem.getTRAFFICITEMID());
              }
              String originalTrafficItemId = "-1";
              if (trafficItem.getORIGINALTRAFFICITEMID() != null) {
                originalTrafficItemId = String.valueOf(trafficItem.getORIGINALTRAFFICITEMID());
              }
              String trafficItemStatusShortDesc = "-1";
              if (trafficItem.getTRAFFICITEMSTATUSSHORTDESC() != null) {
                trafficItemStatusShortDesc = String.valueOf(trafficItem.getTRAFFICITEMSTATUSSHORTDESC());
              }
              String trafficItemTypeDesc = "-1";
              if (trafficItem.getTRAFFICITEMTYPEDESC() != null) {
                trafficItemTypeDesc = String.valueOf(trafficItem.getTRAFFICITEMTYPEDESC());
              }
              String startTime = "-1";
              if (trafficItem.getSTARTTIME() != null) {
                startTime = String.valueOf(trafficItem.getSTARTTIME());
              }
              String endTime = "-1";
              if (trafficItem.getENDTIME() != null) {
                endTime = String.valueOf(trafficItem.getENDTIME());
              }
              String entryTime = "-1";
              if (trafficItem.getENTRYTIME() != null) {
                entryTime = String.valueOf(trafficItem.getENTRYTIME());
              }
              String originLat = "-1";
              String originLon = "-1";
              String toLat = "-1";
              String toLon = "-1";
              String versionId = "-1";
              LOCATION location = trafficItem.getLOCATION();
              if (location != null)
              {
                GEOLOC geoLoc = location.getGEOLOC();
                if (geoLoc != null)
                {
                  ORIGIN geoLocOrigin = geoLoc.getORIGIN();
                  if (geoLocOrigin != null)
                  {
                    originLat = String.valueOf(geoLocOrigin.getLATITUDE());
                    originLon = String.valueOf(geoLocOrigin.getLONGITUDE());
                  }
                  TO geoLocTo = geoLoc.getTO();
                  if (geoLocTo != null)
                  {
                    toLat = String.valueOf(geoLocTo.getLATITUDE());
                    toLon = String.valueOf(geoLocTo.getLONGITUDE());
                  }
                }
                NAVTECH navtech = location.getNAVTECH();
                if (navtech != null) {
                  versionId = String.valueOf(navtech.getVERSIONID());
                }
              }
              String roadClosed = "-1";
              String response_vehicles = "-1";
              TRAFFICITEMDETAIL trafficItemDetail = trafficItem.getTRAFFICITEMDETAIL();
              if (trafficItemDetail != null)
              {
                roadClosed = trafficItemDetail.getROADCLOSED();
                INCIDENT incident = trafficItemDetail.getINCIDENT();
                if (incident != null) {
                  response_vehicles = incident.getRESPONSEVEHICLES();
                }
              }
              String eventItemCancelled = "-1";
              
              EVENT event = trafficItemDetail.getEVENT();
              if (event != null) {
                eventItemCancelled = event.getEVENTITEMCANCELLED();
              }
              String trafficItemType = "-1";
              String trafficItemDescTemp = "-1";
              
              String trafficItemShortDesc = "-1";
              String trafficItemDesc = "-1";
              String trafficItemNoExit = "-1";
              for (TRAFFICITEMDESCRIPTION trafficItemDescription : trafficItem.getTRAFFICITEMDESCRIPTION()) {
                if (trafficItemDescription != null) {
                  try
                  {
                    trafficItemType = trafficItemDescription.getTYPE();
                    trafficItemDescTemp = trafficItemDescription.getContent();
                    if (trafficItemType.equals("desc"))
                    {
                      trafficItemDesc = trafficItemDescTemp;
                      trafficItemDesc = trafficItemDesc.replaceAll("\n", "");
                    }
                    else if (trafficItemType.equals("short_desc"))
                    {
                      trafficItemShortDesc = trafficItemDescTemp;
                      trafficItemShortDesc = trafficItemShortDesc.replaceAll("\n", "");
                    }
                    else if (trafficItemType.equals("no_exit_description"))
                    {
                      trafficItemNoExit = trafficItemDescTemp;
                      trafficItemNoExit = trafficItemNoExit.replaceAll("\n", "");
                    }
                  }
                  finally {}
                }
              }
              String criticalityId = "-1";
              String criticalityDescription = "-1";
              CRITICALITY criticality = trafficItem.getCRITICALITY();
              if (criticality != null)
              {
                criticalityId = String.valueOf(criticality.getID());
                criticalityDescription = String.valueOf(criticality.getDESCRIPTION().getContent());
              }
              String verified = String.valueOf(trafficItem.getVERIFIED());
              
              String abbrevShortDesc = "-1";
              String abbrevDesc = "-1";
              ABBREVIATION abbreviation = trafficItem.getABBREVIATION();
              if (abbreviation != null)
              {
                abbrevShortDesc = String.valueOf(abbreviation.getSHORTDESC());
                abbrevDesc = String.valueOf(abbreviation.getDESCRIPTION().getContent());
              }
              String originEbuCountryCode = "-1";
              String originTableId = "-1";
              String originLocationId = "-1";
              String originLocationDesc = "-1";
              String originRdsDirection = "-1";
              String toEbuCountryCode = "-1";
              String toTableId = "-1";
              String toLocationId = "-1";
              String toLocationDesc = "-1";
              String toRdsDirection = "-1";
              String direction = "-1";
              String alertCtrafficCode = "-1";
              String alertCquantifiers = "-1";
              String alertCDescription = "-1";
              String alertCDuration = "-1";
              String alertCDirection = "-1";
              String alertCAlertCDuration = "-1";
              String alertCUpdateClass = "-1";
              String alertCPhraseCode = "-1";
              String alertCExtent = "-1";
              String primaryOffset = "-1";
              String length = "-1";
              
              RDSTMCLOCATIONS rdsTmcLocations = trafficItem.getRDSTMCLOCATIONS();
              if (rdsTmcLocations != null) {
                for (RDSTMC rdsTmc : rdsTmcLocations.getRDSTMC()) {
                  try
                  {
                    ORIGIN origin = rdsTmc.getORIGIN();
                    if (origin != null)
                    {
                      originEbuCountryCode = String.valueOf(origin.getEBUCOUNTRYCODE());
                      originTableId = String.valueOf(origin.getTABLEID());
                      originLocationId = String.valueOf(origin.getLOCATIONID());
                      originLocationDesc = String.valueOf(origin.getLOCATIONDESC());
                      originRdsDirection = String.valueOf(origin.getRDSDIRECTION());
                    }
                    TO to = rdsTmc.getTO();
                    if (to != null)
                    {
                      toEbuCountryCode = String.valueOf(to.getEBUCOUNTRYCODE());
                      toTableId = String.valueOf(to.getTABLEID());
                      toLocationId = String.valueOf(to.getLOCATIONID());
                      toLocationDesc = String.valueOf(to.getLOCATIONDESC());
                      toRdsDirection = String.valueOf(to.getRDSDIRECTION());
                    }
                    direction = String.valueOf(rdsTmc.getDIRECTION().getContent());
                    
                    ALERTC alertC = rdsTmc.getALERTC();
                    if (alertC != null)
                    {
                      alertCtrafficCode = String.valueOf(alertC.getTRAFFICCODE());
                      alertCquantifiers = String.valueOf(alertC.getQUANTIFIERS());
                      alertCDescription = String.valueOf(alertC.getDESCRIPTION().getContent());
                      alertCDirection = String.valueOf(alertC.getALERTCDIRECTION());
                      alertCAlertCDuration = String.valueOf(alertC.getALERTCDURATION());
                      alertCUpdateClass = String.valueOf(alertC.getUPDATECLASS());
                      alertCPhraseCode = String.valueOf(alertC.getPHRASECODE());
                      alertCExtent = String.valueOf(alertC.getEXTENT());
                      alertCDuration = String.valueOf(alertC.getDURATION());
                    }
                    primaryOffset = String.valueOf(rdsTmc.getPRIMARYOFFSET());
                    length = String.valueOf(rdsTmc.getLENGTH());
                    
                    newline = String.valueOf(x);
                    newline = newline + "\007" + fileName;
                    newline = newline + "\007" + timestamp;
                    newline = newline + "\007" + extendedCC;
                    newline = newline + "\007" + trafficItemId;
                    newline = newline + "\007" + originalTrafficItemId;
                    newline = newline + "\007" + trafficItemStatusShortDesc;
                    newline = newline + "\007" + trafficItemTypeDesc;
                    newline = newline + "\007" + startTime;
                    newline = newline + "\007" + endTime;
                    newline = newline + "\007" + entryTime;
                    newline = newline + "\007" + criticalityDescription;
                    newline = newline + "\007" + criticalityId;
                    newline = newline + "\007" + verified;
                    newline = newline + "\007" + abbrevShortDesc;
                    newline = newline + "\007" + abbrevDesc;
                    newline = newline + "\007" + comments;
                    newline = newline + "\007" + originEbuCountryCode;
                    newline = newline + "\007" + originTableId;
                    newline = newline + "\007" + originLocationId;
                    newline = newline + "\007" + originLocationDesc;
                    newline = newline + "\007" + originRdsDirection;
                    newline = newline + "\007" + toEbuCountryCode;
                    newline = newline + "\007" + toTableId;
                    newline = newline + "\007" + toLocationId;
                    newline = newline + "\007" + toLocationDesc;
                    newline = newline + "\007" + toRdsDirection;
                    newline = newline + "\007" + direction;
                    newline = newline + "\007" + alertCtrafficCode;
                    newline = newline + "\007" + alertCquantifiers;
                    newline = newline + "\007" + alertCDescription;
                    newline = newline + "\007" + alertCAlertCDuration;
                    newline = newline + "\007" + alertCDirection;
                    newline = newline + "\007" + alertCUpdateClass;
                    newline = newline + "\007" + alertCPhraseCode;
                    newline = newline + "\007" + alertCExtent;
                    newline = newline + "\007" + alertCDuration;
                    newline = newline + "\007" + primaryOffset;
                    newline = newline + "\007" + length;
                    newline = newline + "\007" + roadClosed;
                    newline = newline + "\007" + eventItemCancelled;
                    newline = newline + "\007" + trafficItemShortDesc;
                    newline = newline + "\007" + trafficItemDesc;
                    newline = newline + "\007" + trafficItemNoExit;
                    newline = newline + "\007" + originLon;
                    newline = newline + "\007" + originLat;
                    newline = newline + "\007" + toLon;
                    newline = newline + "\007" + toLat;
                    newline = newline + "\007" + versionId;
                    newline = newline + "\007" + response_vehicles;
                    
                    pw.println(newline);
                    x += 1;
                    z = 1;
                  }
                  finally {}
                }
              }
              if (z == 0)
              {
                newline = String.valueOf(x);
                newline = newline + "\007" + fileName;
                newline = newline + "\007" + timestamp;
                newline = newline + "\007" + extendedCC;
                newline = newline + "\007" + trafficItemId;
                newline = newline + "\007" + originalTrafficItemId;
                newline = newline + "\007" + trafficItemStatusShortDesc;
                newline = newline + "\007" + trafficItemTypeDesc;
                newline = newline + "\007" + startTime;
                newline = newline + "\007" + endTime;
                newline = newline + "\007" + entryTime;
                newline = newline + "\007" + criticalityDescription;
                newline = newline + "\007" + criticalityId;
                newline = newline + "\007" + verified;
                newline = newline + "\007" + abbrevShortDesc;
                newline = newline + "\007" + abbrevDesc;
                newline = newline + "\007" + comments;
                newline = newline + "\007" + originEbuCountryCode;
                newline = newline + "\007" + originTableId;
                newline = newline + "\007" + originLocationId;
                newline = newline + "\007" + originLocationDesc;
                newline = newline + "\007" + originRdsDirection;
                newline = newline + "\007" + toEbuCountryCode;
                newline = newline + "\007" + toTableId;
                newline = newline + "\007" + toLocationId;
                newline = newline + "\007" + toLocationDesc;
                newline = newline + "\007" + toRdsDirection;
                newline = newline + "\007" + direction;
                newline = newline + "\007" + alertCtrafficCode;
                newline = newline + "\007" + alertCquantifiers;
                newline = newline + "\007" + alertCDescription;
                newline = newline + "\007" + alertCAlertCDuration;
                newline = newline + "\007" + alertCDirection;
                newline = newline + "\007" + alertCUpdateClass;
                newline = newline + "\007" + alertCPhraseCode;
                newline = newline + "\007" + alertCExtent;
                newline = newline + "\007" + alertCDuration;
                newline = newline + "\007" + primaryOffset;
                newline = newline + "\007" + length;
                newline = newline + "\007" + roadClosed;
                newline = newline + "\007" + eventItemCancelled;
                newline = newline + "\007" + trafficItemShortDesc;
                newline = newline + "\007" + trafficItemDesc;
                newline = newline + "\007" + trafficItemNoExit;
                newline = newline + "\007" + originLon;
                newline = newline + "\007" + originLat;
                newline = newline + "\007" + toLon;
                newline = newline + "\007" + toLat;
                newline = newline + "\007" + versionId;
                newline = newline + "\007" + response_vehicles;
                
                pw.println(newline);
              }
              z = 0;
              x += 1;
            }
            catch (Throwable t)
            {
              s_logger.error("Fail to process traffic item " + trafficItem.getTRAFFICITEMID() + " in file " + thisFile.getName(), t);
              
              pw_log.println("Fail to process traffic item " + trafficItem.getTRAFFICITEMID() + " in file " + thisFile.getName());
              
              pw_log.println(t);
              pw_log.println("");
            }
            finally {}
          }
        }
      }
      catch (Throwable t)
      {
        String fileName;
        String timestamp;
        String extendedCC;
        s_logger.error("Fail to process file " + thisFile.getName() + "\n\t--" + t.getMessage());
        pw_log.println("Fail to process file " + thisFile.getName());
        pw_log.println(t);
        pw_log.println("");
      }
    }
    pw.close();
    pw_log.println("I am here at last....");
    pw_log.close();
    System.out.println("Done parsing.");
    System.out.println("Output location " + this.m_outputPath);
    System.out.println("NOTE: check for errors in the mlparser.log ");
    
    SimpleDateFormat EndDateFormatter = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss");
    
    EndDateFormatter.setTimeZone(new SimpleTimeZone(0, "UTC"));
    
    String outputEndDateFormatter = EndDateFormatter.format(new Date());
    
    System.out.println("Process Start: " + outputStartDateFormatter);
    System.out.println("Process End: " + outputEndDateFormatter);
    System.exit(0);
  }
  
  InputStream getTrafficFileStream(File file)
    throws IOException
  {
    InputStream inputStream = new GZIPInputStream(new FileInputStream(file));
    return inputStream;
  }
  
  private void fail(String message)
  {
    System.out.println(message);
    System.exit(0);
  }
}
